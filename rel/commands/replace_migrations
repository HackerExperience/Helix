#!/usr/local/bin/bash

# Migrations relevant to a release might not be the same as the current
# ones on source control. Since all release migrations are baked into
# the migration itself, we can ensure that `mix ecto.migrate` will only
# run on the migrations the release expects.

set -eu

COMPILED_LIB_DIR="$2"
APPS_DIR="$3"

cd $RELEASE_ROOT_DIR

EXPECTED_MATCHES=$(ls -1 $APPS_DIR | wc -l)

if [ "$EXPECTED_MATCHES" -eq 0 ]; then
    echo "Wrong value for EXPECTED_MATCHES. Is $APPS_DIR correct?"
    exit 1
fi

MATCHES=0

for dir in "$COMPILED_LIB_DIR"/*/; do
    dir=${dir%*/}
    lib=${dir##*/}
    app=$(printf '%s' "$lib" | sed 's/[0-9]*//g' | tr -d '.-')

    if [ -d "$APPS_DIR/$app" ]; then

        MATCHES=$(( $MATCHES + 1 ))

        # if this $app has migrations, replace them
        if [ -d "$APPS_DIR/$app/priv/repo/migrations" ]; then
            compiled_migrations=$dir/priv/repo/migrations
            src_migrations=$APPS_DIR/$app/priv/repo/migrations

            # remove src migrations
            rm $src_migrations/*.exs

            # replace them with release migrations
            cp $compiled_migrations/*.exs $src_migrations/
        fi

    fi
done


if [ "$EXPECTED_MATCHES" -ne "$MATCHES" ]; then
    echo "Bad number of matches: got $MATCHES; expected $EXPECTED_MATCHES"
    exit 1
fi

